@use "../../scss/globals" as *;
@use "sass:map";
$gridGapPV: calc($gridGap / 2);

@mixin dim {
  background-color: white;
  border-style: none;
  border-radius: $ParcelValuesBorderRadius;
}

.ParcelValues {
  font-family: $font-Lexend;
  font-weight: 300;
  font-size: 1.2rem;
  letter-spacing: -0.1px;
  margin: -$bodyPadding 0 -$bodyPadding 0;
  padding: $bodyPadding;
  background-color: map.get($LogoColours, 1);
  color: white;
  max-width: max-content;

  &-Title {
    display: grid;
    grid-template-columns: max-content auto max-content;
    align-items: center;

    > button {
      border: 0;
      border-radius: $ParcelValuesBorderRadius;
      background-color: #03aa5b;
      font-size: 1.4rem;
      font-weight: 500;
      font-family: $font-Lexend;
      color: white;
      padding: 0.6rem;
      margin-left: $gridGap;
      max-width: max-content;
      justify-self: end;
    }
  }

  &-Dimensions {
    display: grid;
    grid-template-columns: auto max-content;
    gap: $gridGapPV;
    grid-row: 2;
    grid-column: 1 / span 2;
    padding-top: $gridGap;

    &_lessThan1Metre {
      @include dim;
      padding: 0;
      height: 100%;
      text-align: left;
    }

    &_lengths {
      display: none;
    }
  }

  @include media(">FORM") {
    margin: 0 auto;
  }

  @media (min-width: 640px) {
    &-Title {
      gap: $gridGap;

      > button {
        margin-left: 0;
      }
    }

    &-Dimensions {
      grid-row: 1;
      grid-column: 2;
      padding-top: 0;
    }
  }
}

.displayNone {
  display: none;
}

.showAllDimensionsAndWeight {
  display: grid;
  grid-template-columns: min-content min-content;
  gap: $gridGapPV;
  justify-content: center;
}

.displayGrid {
  display: grid;
  gap: $gridGapPV;
  justify-content: center;
  grid-template-columns: repeat(3, auto);
}

.removeGap {
  gap: 0;
}
